

//
//
// File:        logentry.cpp  
//       
// Version:     1.0
// Date:        
// Author:      
//
// Description: Class implementation for a log entry.
//
//

////////////////////////////////////////////////////////////
#include <iostream>
#include <vector>

#include "string.hpp" 
#include "logentry.hpp"

////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
LogEntry::LogEntry(String s) {
    // ...
    std::vector<String> vec = s.split(' ');
    
}

////////////////////////////////////////////////////////// 
// REQUIRES:  takes input from a file
// ENSURES: creates a longEntry object from Strings from each line of file
//
std::vector<LogEntry> parse(std::istream& in) {
    std::vector<LogEntry> result;
    String temp;
    int i = 0;
    while(in != eof){
      getline(in,temp);
      result[i] = temp;
      ++i;
    }
    return result;
}

////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
void output_all(std::ostream& out, const std::vector<LogEntry> &) {
    
}

////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
void by_host(std::ostream& out, const std::vector<LogEntry>&) {

}

////////////////////////////////////////////////////////// 
// REQUIRES:  
// ENSURES: 
//
int byte_count(const std::vector<LogEntry> & logentry) {
  int result = 0;
  result = logentry.size * sizeof(logentry.size)
    return result;
}

