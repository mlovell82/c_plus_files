// Infix to Postfix Program
// Michael Lovell
// cs23001
// 4/6/2016

#include<iostream>
#include"stack.hpp"
#include"string/string.hpp"
#include<fstream>
#include<vector>

// Postfix function
// Requires:  an output stream, input stream, and a stack object
// Ensures:  infix from input is converted to a postfix expresson and sent to output stream
void postfix(std::ostream&, std::istream&, stack<String>&);
String evaluate(String, String, String);

int main(int argc, char *argv[]){

   
  std::ifstream file(argv[1]);
  if(!file.is_open()){
    std::cout << "Unable to open file";
  }

 stack<String> infix;  

 //option 1 output to file
 if(argc == 3){
   std::ofstream out(argv[2]);
   postfix(out, file, infix);
 }

 //option 2 output to console
  else if (argc != 3)
    postfix(std::cout, file, infix);

   
  file.close();
}
 
   void postfix(std::ostream& output, std::istream& file, stack<String>& infix){
     std::vector<String> postFixVector;
String postFixString;
String temp;
  String op;
  String rhs;
  String space (' ');  
while(!file.eof()){
    String result;
    file >> temp;
    if ((temp != "(") && (temp != ")") && (temp != ";"))
      infix.push(temp);
    if(temp == ")"){
      rhs = infix.getTos();
      infix.pop();
      op = infix.getTos();
      infix.pop();
      result = infix.getTos() + space;
      result = result + rhs + space;
      result = result + op;
      infix.pop();
      infix.push(result);

    }
    if (temp == ";")
      output << infix.getTos() << std::endl;
  }
  postFixString = infix.getTos();
  postFixVector = postFixString.split(' ');
  String rt, lt;  
stack<String> eval;
 for(std::vector<String>::iterator i = postFixVector.begin(); i != postFixVector.end(); ++i){
   if((*i != '+') && (*i != '-') && (*i != '*') && (*i != '/'))
      eval.push(*i);
    else
      {
	rt = eval.getTos();
	eval.pop();
	lt = eval.getTos();
	eval.pop();
	eval.push(evaluate(lt, *i, rt));
      }
 }
}
    String evaluate(String x, String y, String u){
      String result;

    std::cout << "   " << "LD" << " " << x  << std::endl;
    
    if (y == '+')
      std::cout << "   " <<  "AD" << " " << u << std::endl;
    if (y == '-')
      std::cout << "   " <<  "SB" << " " << u << std::endl;
    if (y == '*')
      std::cout << "   " <<  "ML" << " " << u << std::endl;
    if (y ==  '/')
      std::cout << "   " <<  "DV" << " " << u << std::endl;

    std::cout << "   " << "ST" << " " << "TMP" << std::endl;
    result = "TMP";
    return result;
}
