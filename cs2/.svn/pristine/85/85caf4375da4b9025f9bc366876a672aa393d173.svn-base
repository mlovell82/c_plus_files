/**
 * Michael Lovell
 * bigint.cpp
 * cs23001
 */
#include "bigint.hpp"

bigint::bigint(){
  for (int i = 0; i < size; ++i)
    bigint_array[i] = 0;
}

bigint::bigint(int number_entered){
  int array_var = size - 1; // loop var to assign 50th element with ones place digit
  int ten = 10; // variable used to from ones place to tens to hundreds ect.
  int final_digit = -1; // while loop proceeds till this value changes with last digit
  while (final_digit < 0){
    if (number_entered < ten){
      final_digit = number_entered;
      bigint_array[array_var] = number_entered;
    }  
  else // number_entered is more than 2 digits
      {
	bigint_array[array_var] = (number_entered % ten);
	number_entered = (number_entered / ten);
      --array_var; // decrement to assign next element
      }
  }
  // this while loop to assign the remaining elements with zeros
  --array_var;
  while (array_var >= 0){
    bigint_array[array_var] = 0;
    --array_var;
  }
}

bigint::bigint(const char char_array[]){
  int i = 0;
  int number_from_char = 0;
  int ten = 10; // variable used to from ones place to tens to hundreds ect.
  while ((char_array[i] == '0') || (char_array[i] == '1') || (char_array[i] == '2') || (char_array[i] == '3') || (char_array[i] == '4') || (char_array[i] == '5') || (char_array[i] == '6') || (char_array[i] == '7') || (char_array[i] == '8') || (char_array[i] == '9'))
    {
      number_from_char = (char_array[i] - '0') + number_from_char;
      number_from_char = number_from_char * ten;
      ++i;
    }
  number_from_char = number_from_char / ten;
  int array_var = size - 1; // loop var to assign 50th element with ones place digit
  int final_digit = -1; // while loop proceeds till this value changes with last digit
  while (final_digit < 0){
    if (number_from_char < ten){
      final_digit = number_from_char;
      bigint_array[array_var] = number_from_char;
    }
    else // number_entered is more than 2 digits
      {
	bigint_array[array_var] = (number_from_char % ten);
	number_from_char = (number_from_char / ten);
	--array_var; // decrement to assign next element
      }
  }
  // this while loop to assign the remaining elements with zeros
  --array_var;
  while (array_var >= 0){
    bigint_array[array_var] = 0;
    --array_var;
  }
}

  std::ostream& operator<<(std::ostream &out, bigint sample){
  for(int i = 0; i < sample.size; ++i)
    out << sample.bigint_array[i] << " ";
  return out;
}
bool bigint::compare(bigint left, bigint right){
  bool result = true;
  for (int = i; i < size; ++i)
    if(left[i] != right[i])
      result = false;
  return result;
}
